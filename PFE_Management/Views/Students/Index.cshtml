@model PaginatedList<PFE_Management.Models.Student>

@{
    ViewData["Title"] = "Index";
}

<h1>Liste des étudiants</h1>

<br />
<p>
    <a asp-action="Create">Ajouter Un Nouveau étudiant </a>
</p>
<div class="m-lg-5">
    <p class="bg-success" >
        Le Champ <b>Has Account</b> en <b>Vert</b> presente les etudiants qui ont deja un compte etulisateur, sinon on <b>Bleu</b>
        qui ont pas encore un Compte utilisateur
    </p>
</div>

<form asp-action="Index" method="get">
    <div class="form-actions no-color">
        <p>
            Find by name: <input type="text" name="SearchString" value="@ViewData["CurrentFilter"]" />
            <input type="submit" value="Search" class="btn btn-default" /> |
            <a asp-action="Index">Back to Full List</a>
        </p>
    </div>
</form>

<table class="table">
    <thead>
        <tr>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["NameSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Last Name</a>
            </th>
            <th>
                First Name
            </th>
            <th>
                Adresse Email
            </th>
            <th>
                Has Account
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["DateSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Enrollment Date</a>
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.LastName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.FirstMidName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Email)
            </td>
            @*ici je veux presenter la case has accout en vert pour les etudiant qui ont deja un compte utilistaeur
                et en bleu ceux qui ont pas encore un compte*@
            @{
                @if (item.etatAccount == true)
                {
                    <td class="bg-success">
                        @Html.DisplayFor(modelItem => item.etatAccount)
                    </td>
                }
                else {
                    <td class="bg-primary">
                        @Html.DisplayFor(modelItem => item.etatAccount)
                    </td>
                }
            }
            <td>
                @Html.DisplayFor(modelItem => item.EnrollmentDate)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.ID">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.ID">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.ID">Delete</a> |
                @*<a class="" asp-action="Register"  asp-area="Identity"  asp-route-id="@item.ID">Create Account for this student</a>*@
                <a asp-action="Register" asp-route-id="@item.ID">Create an account for this student</a>
            </td>
        </tr>
        }
    </tbody>
</table>

@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex - 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @prevDisabled">
    Previous
</a>
<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex + 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @nextDisabled">
    Next
</a>
